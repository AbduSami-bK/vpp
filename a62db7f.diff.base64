From a62db7f3796ef152d23475ed36ad5f3fbfcab2a8 Mon Sep 17 00:00:00 2001
From: Jasvinder Singh <jasvinder.singh@intel.com>
Date: Thu, 03 Jan 2019 12:42:50 +0000
Subject: [PATCH] HQoS: update scheduler to support mbuf sched field change

DPDK 19.02 proposes new format for mbuf sched field. This commit
updates the scheduler code to support new mbuf sched field.

Change-Id: I6806d7f9eef4589aea4e8de1c068c72b7b226d1f
signed-off-by: Jasvinder Singh <jasvinder.singh@intel.com>
---

diff --git a/src/plugins/dpdk/device/dpdk.h b/src/plugins/dpdk/device/dpdk.h
index b2ca56c..4daed8e 100644
--- a/src/plugins/dpdk/device/dpdk.h
+++ b/src/plugins/dpdk/device/dpdk.h
@@ -127,6 +127,7 @@
   CLIB_CACHE_LINE_ALIGN_MARK (cacheline0);
 
   struct rte_ring *swq;
+  struct rte_sched_port *hqos;
 
   u64 hqos_field0_slabmask;
   u32 hqos_field0_slabpos;
diff --git a/src/plugins/dpdk/hqos/hqos.c b/src/plugins/dpdk/hqos/hqos.c
index 1a8dd6d..ae2e49c 100644
--- a/src/plugins/dpdk/hqos/hqos.c
+++ b/src/plugins/dpdk/hqos/hqos.c
@@ -359,6 +359,7 @@
 	tid = i;
 
       xd->hqos_wt[tid].swq = xd->hqos_ht->swq[i];
+      xd->hqos_wt[tid].hqos = xd->hqos_ht->hqos;
       xd->hqos_wt[tid].hqos_field0_slabpos = hqos->pktfield0_slabpos;
       xd->hqos_wt[tid].hqos_field0_slabmask = hqos->pktfield0_slabmask;
       xd->hqos_wt[tid].hqos_field0_slabshr =
@@ -629,13 +630,6 @@
   val;                                                          \
 })
 
-#define RTE_SCHED_PORT_HIERARCHY(subport, pipe, traffic_class, queue, color) \
-  ((((u64) (queue)) & 0x3) |                               \
-  ((((u64) (traffic_class)) & 0x3) << 2) |                 \
-  ((((u64) (color)) & 0x3) << 4) |                         \
-  ((((u64) (subport)) & 0xFFFF) << 16) |                   \
-  ((((u64) (pipe)) & 0xFFFFFFFF) << 32))
-
 void
 dpdk_hqos_metadata_set (dpdk_device_hqos_per_worker_thread_t * hqos,
 			struct rte_mbuf **pkts, u32 n_pkts)
@@ -702,35 +696,14 @@
       u32 pkt3_tc = hqos->hqos_tc_table[pkt3_dscp & 0x3F] >> 2;
       u32 pkt3_tc_q = hqos->hqos_tc_table[pkt3_dscp & 0x3F] & 0x3;
 
-      u64 pkt0_sched = RTE_SCHED_PORT_HIERARCHY (pkt0_subport,
-						 pkt0_pipe,
-						 pkt0_tc,
-						 pkt0_tc_q,
-						 0);
-      u64 pkt1_sched = RTE_SCHED_PORT_HIERARCHY (pkt1_subport,
-						 pkt1_pipe,
-						 pkt1_tc,
-						 pkt1_tc_q,
-						 0);
-      u64 pkt2_sched = RTE_SCHED_PORT_HIERARCHY (pkt2_subport,
-						 pkt2_pipe,
-						 pkt2_tc,
-						 pkt2_tc_q,
-						 0);
-      u64 pkt3_sched = RTE_SCHED_PORT_HIERARCHY (pkt3_subport,
-						 pkt3_pipe,
-						 pkt3_tc,
-						 pkt3_tc_q,
-						 0);
-
-      pkt0->hash.sched.lo = pkt0_sched & 0xFFFFFFFF;
-      pkt0->hash.sched.hi = pkt0_sched >> 32;
-      pkt1->hash.sched.lo = pkt1_sched & 0xFFFFFFFF;
-      pkt1->hash.sched.hi = pkt1_sched >> 32;
-      pkt2->hash.sched.lo = pkt2_sched & 0xFFFFFFFF;
-      pkt2->hash.sched.hi = pkt2_sched >> 32;
-      pkt3->hash.sched.lo = pkt3_sched & 0xFFFFFFFF;
-      pkt3->hash.sched.hi = pkt3_sched >> 32;
+      rte_sched_port_pkt_write (hqos->hqos, pkt0, pkt0_subport, pkt0_pipe,
+				pkt0_tc, pkt0_tc_q, 0);
+      rte_sched_port_pkt_write (hqos->hqos, pkt1, pkt1_subport, pkt1_pipe,
+				pkt1_tc, pkt1_tc_q, 0);
+      rte_sched_port_pkt_write (hqos->hqos, pkt2, pkt2_subport, pkt2_pipe,
+				pkt2_tc, pkt2_tc_q, 0);
+      rte_sched_port_pkt_write (hqos->hqos, pkt3, pkt3_subport, pkt3_pipe,
+				pkt3_tc, pkt3_tc_q, 0);
     }
 
   for (; i < n_pkts; i++)
@@ -751,14 +724,8 @@
       u32 pkt_tc = hqos->hqos_tc_table[pkt_dscp & 0x3F] >> 2;
       u32 pkt_tc_q = hqos->hqos_tc_table[pkt_dscp & 0x3F] & 0x3;
 
-      u64 pkt_sched = RTE_SCHED_PORT_HIERARCHY (pkt_subport,
-						pkt_pipe,
-						pkt_tc,
-						pkt_tc_q,
-						0);
-
-      pkt->hash.sched.lo = pkt_sched & 0xFFFFFFFF;
-      pkt->hash.sched.hi = pkt_sched >> 32;
+      rte_sched_port_pkt_write (hqos->hqos, pkt, pkt_subport, pkt_pipe,
+				pkt_tc, pkt_tc_q, 0);
     }
 }
 
